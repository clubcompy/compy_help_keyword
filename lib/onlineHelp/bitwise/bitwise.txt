         About Bitwise Keywords
         \u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E\u203E
Integer (whole) numbers in the Comfy
Language are 32-bit, signed numbers.

The bits in these numbers can be shifted
and rotated by powers of two to the left
and right. These are called "bitwise"
manipulations.

These are the Comfy language keywords
for bitwise manipulations of numbers:

  %SHL%      %LSHR%     %SHR%      %ROL%
  %ROR%

The Comfy language has operators for
performing other bitwise operations
with numbers

 |  %bitwise% or
 &  %bitwise% and
 ^  %bitwise% xor
 ~  %bitwise% not

The following sections document the
grammars for these symbols:

  ------------------------------------

& (bitwise and)

Grammar:
 left "&" right

Arguments:
 - left: <number|boolean>
 - right: <number|boolean>

Evaluates to:
 <int32> each bit of left is
 bitwise AND'ed with each bit of right

Notes:
 - Bitwise AND left/right bit combos:

   left  \179  right  \179  left AND right
 \196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196
    0    \179    0    \179        0
    0    \179    1    \179        0
    1    \179    0    \179        0
    1    \179    1    \179        1

 - If left or right are a boolean,
   they will be converted to a number
   before being bitwise AND'd. true will
   be 1. false will be 0

  ------------------------------------

| (bitwise or)

Grammar:
 left "|" right

Arguments:
 - left: <number|boolean>
 - right: <number|boolean>

Evaluates to:
 <int32> each bit of left is
 bitwise OR'd with each bit of right

Notes:
 - Bitwise OR left/right bit combos:

   left  \179  right  \179  left OR right
 \196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196
     0   \179    0    \179       0
     0   \179    1    \179       1
     1   \179    0    \179       1
     1   \179    1    \179       1

 - If left or right are a boolean,
   they will be converted to a number
   before being bitwise OR'd. true will
   be 1. false will be 0

  ------------------------------------

^ (bitwise XOR) - exclusive-or

Grammar:
 left "^" right

Arguments:
 - left: <number|boolean>
 - right: <number|boolean>

Evaluates to:
 <int32> each bit of left is
 bitwise XOR'd with each bit of right

Notes:
 - Bitwise XOR left/right bit combos:

   left  \179  right  \179  left XOR right
 \196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196\196
    0    \179    0    \179        0
    0    \179    1    \179        1
    1    \179    0    \179        1
    1    \179    1    \179        0

 - If left or right are a boolean,
   they will be converted to a number
   before being bitwise XOR'd. true will
   be 1. false will be 0

  ------------------------------------

~ (bitwise not)

Grammar:
 "~" value

Arguments:
 - value: <number|boolean>

Evaluates to:
 <int32> each bit of value is bitwise
 NOT'd

Notes:
 - Bitwise NOT values:

   value  \179  NOT value
 \196\196\196\196\196\196\196\196\196\197\196\196\196\196\196\196\196\196\196\196\196\196\196
     0    \179      1
     1    \179      0

 - If value is a boolean, it will be
   converted to a number before being
   bitwise NOT'd. true will be 1. false
   will be 0
