REM ** Note to implementers: the Node.JS tool that builds the final Comfy program will insert line numbers for you
REM ** Note to implementers: the Node.JS tool will provide a topic names array in 'tNames' and a matching array of string arrays in 'tContents'

VWAIT false

fg = 17
bg = 225
cBg = 127
cFg = 75
dFg = 0
dGreyFg = 128
dBg = 255
tFg = 0
tBg = 224
tSel = 'home'
hs = []
ps = []

fInv = '\uE500'         ; REM flips inverted cursor
uInv = '\uE503'         ; REM unstashes inverted cursor
eAlb = '\uE50A'         ; REM enables automatic line break
dAlb = '\uE509'         ; REM disables automatic line break
eAlb = '\uE50A'         ; REM enables automatic line break
cUp = '\uE800'          ; REM simulates up arrow keypress
cDn = '\uE801'          ; REM simulates down arrow keypress
cScrEnd = '\uE809'      ; REM simulates scroll end keypress
cPgDn = '\uE805'        ; REM simulates page down keypress
sUp = '\uE80A'          ; REM simulates scroll up keypress
sDn = '\uE80B'          ; REM simulates scroll down keypress
pUp = '\uE804'          ; REM simulates page up keypress
pDn = '\uE805'          ; REM simulates page down keypress

REM ** Did the user start HELP and request a keyword?  Select it
IF jumpTo THEN
 tSel = FLIP jumpTo, false
END

WAIT SYSCALL 0x6000, 0  ; REM trap the esc key so that the help doesn't exit immediately when Esc is pressed
WAIT SYSCALL 0x6001     ; REM stash cursor and create a new one so we don't corrupt the user's display
SELECT 6
MOVE Cursor, 0, 29

CLEAR 6
BGCOLOR Playfield[6], bg
FGCOLOR Cursor, fg

bye = false
cTyped = ARRAY
cPos = 0
uArr = 0
dArr = 0
lArr = 0
rArr = 0
pgUp = 0
pgDn = 0

lu = 0
ld = 0
ll = 0
lr = 0
lpu = 0
lpd = 0

LISTEN Keyboard
 kc = Keyboard.kcode
 ev = Keyboard.evt
 IF (kc EQ 27 AND ev EQ 1) DO bye = true
 IF (kc EQ 8 AND ev EQ 1) THEN
  cPos = cPos - 1
  IF cPos LT 0 DO cPos = 0
 END
 IF (kc EQ 38 AND ev EQ 1) DO uArr = uArr + 1
 IF (kc EQ 37 AND ev EQ 1) DO lArr = lArr + 1
 IF (kc EQ 39 AND ev EQ 1) DO rArr = rArr + 1
 IF (kc EQ 40 AND ev EQ 1) DO dArr = dArr + 1
 IF (kc EQ 33 AND ev EQ 1) DO pgUp = 1
 IF (kc EQ 34 AND ev EQ 1) DO pgDn = 1
 IF (kc EQ 13 AND ev EQ 1 AND cPos GT 0) THEN
  tSel = ''
  FOR j = 0 UPTO cPos DO tSel = tSel + cTyped[j]
  cPos = 0
  IF LENGTH tSel DO ps = ARRAY
 END
 IF (Keyboard.kchar AND cPos LT 19) THEN
  cs = FLIP Keyboard.kchar, false
  cc = TOCODE cs
  IF ((cc GTE 97 AND cc LTE 122) OR (cc GTE 48 AND cc LTE 57)) THEN
   cTyped[cPos] = cs
   cPos = cPos + 1
  END
 END
END

LISTEN Mouse
 ev = Mouse.evt
 dy = Mouse.wheeldy
 IF (ev EQ 10) THEN
  IF (dy LT 0) DO dArr = dArr - dy
  IF (dy GT 0) DO uArr = uArr + dy
 END
END

WHILE NOT bye
 REM ** move the screen around when users hit the control buttons
 IF uArr GT 0 THEN
  PRINT sDn
  uArr = 0
  lu = 1
 END
 IF dArr GT 0 THEN
  PRINT sUp
  dArr = 0
  ld = 1
 END
 IF pgUp GT 0 THEN
  PRINT pUp
  pgUp = 0
  lpu = 1
 END
 IF pgDn GT 0 THEN
  PRINT pDn
  pgDn = 0
  lpd = 1
 END

 REM *** go back in history
 IF lArr GT 0 THEN
  IF LENGTH hs GT 1 THEN
   INSERT ps, REMOVE hs
   tSel = REMOVE hs
  END
  lArr = 0
  ll = 1
 END

 REM *** go forward in history
 IF rArr GT 0 THEN
  IF LENGTH ps GT 0 THEN
   tSel = REMOVE ps
  END
  rArr = 0
  lr = 1
 END

 REM *** print the next help topic if tSel is set
 IF tSel THEN
  PRINT cScrEnd
  PRINT fInv
  FOR i = Cursor.x UPTO 40 DO PRINT '-'
  PRINT dAlb + 'Set topic: ' + tSel
  FOR i = Cursor.x UPTO 40 DO PRINT ' '
  PRINTLN uInv + eAlb
  PRINTLN

  i = 0
  WHILE i LT LENGTH tNames
   IF tNames[i] EQ tSel THEN
    ctnt = tContents[i]
    lns = 0
    FOR j = 0 UPTO LENGTH ctnt
     PRINT dAlb + ctnt[j]
     FOR k = Cursor.x UPTO 39 DO PRINT ' '
     PRINTLN
     PRINT eAlb
     lns = lns + 1
    END
    FOR k = j UPTO 30
     PRINTLN
     lns = lns + 1
    END
    PRINTLN
    FOR j = 0 INCL lns DO PRINT cUp
    INSERT hs, tSel
    BREAK
   END
   i = i + 1
  END
  IF i EQ LENGTH tNames DO PRINT 'Help topic "' + tSel + '" not found\n\n'
  tSel = ''
 END

 REM *** update the dock
 WAIT SYSCALL 0x6001
 SELECT 7
 FOR i = 0 UPTO 40 DO TAG '\095', i, 28, 65, -1, false
 TAG '\u00AF', 0, 29, dFg, dBg
 FOR i = 0 UPTO cPos DO TAG cTyped[i], i + 1, 29, tFg, tBg, false
 TAG ' ', cPos + 1, 29, tFg, tBg, cursor.blink
 FOR i = cPos + 1 UPTO 20 DO TAG ' ', i + 1, 29, tFg, tBg, false
 TAG ' ', 21, 29, dFg, dBg
 TAG 'K', 22, 29, dFg, dBg
 TAG 'e', 23, 29, dFg, dBg
 TAG 'y', 24, 29, dFg, dBg
 TAG 's', 25, 29, dFg, dBg
 TAG ':', 26, 29, dFg, dBg
 TAG ' ', 27, 29, dFg, dBg
 TAG '\uF103', 28, 29, dGreyFg, dBg, (lu GT 0)
 TAG '\uF105', 29, 29, dGreyFg, dBg, (ld GT 0)
 TAG '\uF106', 30, 29, dGreyFg, dBg, (ll GT 0)
 TAG '\uF104', 31, 29, dGreyFg, dBg, (lr GT 0)
 TAG '\uF109', 32, 29, dGreyFg, dBg, (lpu GT 0)
 TAG '\uF10A', 33, 29, dGreyFg, dBg, (lpu GT 0)
 TAG '\uF10B', 34, 29, dGreyFg, dBg, (lpd GT 0)
 TAG '\uF10C', 35, 29, dGreyFg, dBg, (lpd GT 0)
 TAG '\uF107', 36, 29, dGreyFg, dBg, bye
 TAG '\uF108', 37, 29, dGreyFg, dBg, bye
 TAG ' ', 38, 29, dGreyFg, dBg
 TAG ' ', 39, 29, dGreyFg, dBg
 WAIT SYSCALL 0x6002

 lu = lu - 1
 ld = ld - 1
 ll = 0
 lr = 0
 lpu = lpu - 1
 lpd = lpd - 1

 VWAIT
END

REM *** Cleanup the playfields we used and unstash the cursor
CLEAR 6, 7
BGCOLOR playfield[6], -1
WAIT SYSCALL 0x6002

REM *** Quit silently
QUIT false
